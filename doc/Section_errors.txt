"Previous Section"_Section_python.html - "PHISH WWW Site"_pws -
"PHISH Documentation"_pd - "Next Section"_Manual.html :c

:link(pws,http://www.sandia.gov/~sjplimp/phish.html)
:link(pd,Manual.html)

:line

7. Errors :h3

This section discusses error and warning messages generated by the
PHISH library and bait.py and bait.py tools.  It also gives tips on
debugging the operation of PHISH nets.

7.1 "Debugguing PHISH nets"_#error_1
7.2 "Error and warning messages from the PHISH library"_#error_2
7.3 "Error messages from bait.py"_#error_3

:line
:line

Debugguing PHISH nets :h4,link(error_1)

A PHISH net can be difficult to debug because it may involve many
independent running processes exchanging datums in a complex pattern,
and rapid processing of large volumes of data.  Here are some ideas
that may be helpful in finding a bug if something goes wrong:

As with any parallel program, running on as few processors as possible
(that still exhibit the bug) simplifies debugging.  For a PHISH net,
each minnow is a process, but you may be able to reduce the minnow
count via the "school"_bait_school.html command in the PHISH input
script. :ulb,l

In principle, a PHISH net should behave similarly whether it is run
entirely on a desktop machine, on a large parallel machine, or on a
distributed network.  Running all minnows on a single desktop machine
is almost always the easiest mode to debug in. :l

One or more "slowdown"_slowdown.html minnows can be inserted in a
PHISH net to slow down the rate at which datums are processed. :l

The "print"_print.html minnow can receive the output of any minnow and
print it to the screen.  This is done by using the
"hook"_bait_hook.html command in a PHISH input script.  The output of
a minnow can be connected to a print minnow in addition to other
minnows.  Also note that hooking a minnow's output port to another
input port is optional, as discussed in "this
section"_Section_minnows.html#minnow_3.  This means that you can often
debug a PHISH net in stages by commenting out downstream minnows and
then turning them on one at a time. :l

Printf() or fprintf() statements can be added to a minnow's source
code to print messages to the screen or a file when datums are
received, processed, or sent.  Doing this stage by stage, beginning
with the first datums read or generated by the PHISH input script, is
an effective way to verify that datums are formatted correctly, and
are being sent and received as expected. :l,ule

:line

Error and warning messages from the PHISH library :h4,link(error_2)

When a minnow makes a call to the PHISH library, various error and
warning conditions are checked for.  If an error is encountered, a
message in the following format is printed to stderr:

PHISH ERROR: Minnow executable ID school-id # global-id: message :pre

where "executable" is the name of executable minnow file (not the full path,
just the filename), "school-id" is the ID of the minnow as specified in the
PHISH input script, "global-id" is the global-ID of the minnow, and message is
the error message.  Each minnow has a global ID from 0 to Nglobal-1, where
Nglobal is the total number of minnows in the net specified by the PHISH input
script.  This supplementary information is helpful in debugging which minnow
generated the error message.

If a warning condition is detected, a similarly-formatted message is
printed, with ERROR replaced by WARNING.

Note that by default, an error condition will cause an abort, shutting-down the
entire PHISH net.  However, it is possible for a minnow to explicitly cancel
the abort.  In this case, the PHISH library call that triggered the error will
return a non-zero integer error code to indicate that an error occurred.  See
the documentation for "phish_abort()"_phish_error.html for more information on
how to cancel an abort.

The messages should be self-explanatory.  See the doc page for the
"PHISH library"_Section_library.html, or the doc pages for "individual
PHISH library functions"__Section_library.html#library_1 for relevant
details.  If necessary, the library source code in
src/phish-common.cpp or src/phish-mpi.cpp or src/phish-zmq.cpp can be
searched for the message text.

:line

Error messages from bait.py :h4,link(error_3)

The "bait.py tool"_Section_bait.html is used to process PHISH input
scripts and optionally run them.  Any errors that bait.py encounters
in the input script generate error messages that should be
self-explanatory.

See the doc page for the "bait.py"_Section_bait.html tool, or the doc
pages for "individual PHISH input script
commands"__Section_bait.html#bait_1 for relevant details.  If
necessary, the Python source code in bait/bait.py can be searched for
the message text.
