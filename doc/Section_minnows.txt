"Previous Section"_Bait.html - "PHISH WWW Site"_pws -
"PHISH Documentation"_pd - "Next Section"_Library.html :c

:link(pws,http://phish.sandia.gov)
:link(pd,Manual.html)

:line

3. PHISH Minnows :h3

In PHISH lingo, a "minnow" is a stand-alone application which makes
calls to the "PHISH library"_Library.html.  Typically they are small
programs which perform a single task, e.g. they parse a string into
keywords and store statistics on those keywords.

Hooked together by connections to other sets of minnows, in various
communication patterns

Often come in sets as specified by input script.  Parallel if working
in tandem with other duplicate minnows, each processing a subset of
datums.

minnow vs shark vs whale

how general vs specific to write minnow when processing datums
  note that PHISH input script can send unexpected data to minnow

This doc page covers these topics:

3.1 "List of minnows"_#minnow_1
3.2 "Code structure of a minnow"_#minnow_2
3.3 "Communication via ports"_#minnow_3
3.4 "Shutting down a minnow"_#minnow_4
3.5 "Building a minnow"_#minnow_5 :ul

:line
:line

3.1 List of minnows :link(minnow_1),h4

This is a list of minnows in the minnow directory of the PHISH
distribution.  Each has its own doc page.  Some are written in C++,
some in Python, some in both:

"count"_count.html
"file2fields"_file2fields.html
"file2words"_file2words.html
"filegen"_filegen.html
"ping"_ping.html
"pong"_pong.html
"print"_print.html
"readgraph"_readgraph.html
"rmat"_rmat.html
"slowdown"_slowdown.html
"sort"_sort.html :ul

These are special minnows which can wrap stand-alone non-PHISH
programs which read from stdin and write to stdout, so that they can
be used in as minnows in a PHISH program:

"wrapsink"_wrapsink.html
"wrapsource"_wrapsource.html
"wrapss"_wrapss.html :ul

These are simple stand-alone programs that are examples of code that
can be wrapped by the "wrap" minnows:

"echo"_echo.html
"reverse"_reverse.html :ul

:line

3.2 Code structure of a minnow :link(minnow_2),h4

Use count.py, is same in C

Best way to make sense of what a minnow does is examine a few
simple ones from the minnow dir.

command line args
setup calls to lib
setting callbacks

when to make various kinds of lib calls

Deinfe ports as in connect command

loop vs probe vs recv

receving and unpacking a datum

packing and sending a datum


1   #!/usr/local/bin/python
2
3   import sys,os,glob,copy
4   import phish
5
6   def count(nvalues):
7     if nvalues != 1: phish.error("Count processes one-value datums")
8     type,str,tmp = phish.unpack()
9     if type != phish.STRING:
10      phish.error("File2words processes string values")
11    if hash.has_key(str): hash[str] = hash[str] + 1
12    else: hash[str] = 1
13
14  def sort():
15    pairs = hash.items()
16    for key,value in pairs:
17      phish.pack_int(value)
18      phish.pack_string(key)
19      phish.send(0)
20
21  args = phish.init(sys.argv)
22  phish.input(0,count,sort,1)
23  phish.output(0)
24  phish.check()
25
26  if len(args) != 0: phish.error("Count syntax: count")
27
28  hash = {}
29  
30  phish.loop()
31  phish.exit() :pre



:line

3.3 Communication via ports :link(minnow_3),h4

rules about ports

:line

3.4 Shutting down a minnow :link(minnow_4),h4

regular datum vs done message

For a PHISH program whose minnows operate in a pipelined
one-directional fashion (e.g. one or more minnows read input,
send datums to a 2nd set of minnows, on to a 3rd set, etc), it
is typically sufficient to trigger an orderly shutdown of
the entire program 

one-way schools, triggered by head
done messages, per port level
close ports explicitly or implicitly
calls to exit, close, etc
special care for ring or chain connections
or when school has loops
Ctrl-C option
output at end

shutdown in ZMQ is buggy

:line

3.5 Building a minnow :link(minnow_5),h4

makefile

debug a school in stages, since no connection
to an output ports is required, or could just hook output to
a print minnow

use of slowdown minnow to throttle

