"PHISH WWW Site"_pws - "PHISH Documentation"_pd - "Bait.py Commands"_pc :c

:link(pws,http://phish.sandia.gov)
:link(pd,Manual.html)
:link(pc,Bait.html)

:line

phish_unpack() function :h3
phish_datum() function :h3

[C syntax:]

int phish_unpack(char **buf, int *len) :pre
int phish_datum(char **buf, int *len) :pre

[C examples:]

char *buf;
int len;
int type = phish_unpack(&buf,&len);
int iport = phish_datum(&buf,&len); :pre

[Python syntax:]

def unpack() :pre
def datum() :pre

[Python examples:]

import phish
type,value,len = phish.unpack()
iport,buf,len = phish.datum() :pre

NOTE:  need to doc how Python is different below

[Description:]

These are PHISH library functions which can be called from a minnow
application.  In PHISH lingo, a "minnow" is a stand-alone application
which makes calls to the "PHISH library"_Library.html.

These functions are used to unpack a datum after it has been received
from another minnow.

As discussed in "this section"_Library.html#datum of the "PHISH
Library"_Library.html doc page, datums sent and recived by the PHISH
library contain one or more fields.  A field is a fundamental data
type, such as an "int" or vector of "doubles" or a NULL-terminated
character string.  These fields are "packed"_phish_pack.html into a
contiguous byte string when then are sent, using integer flags to
indicate what type and length of data comes next.  These unpack
functions allow the minnow to extract data from the datum, one field
at a time.

Note that these functions return pointers to the internal buffer
holding the datum within the PHISH library.  The buffer will be
overwritten when the minnow returns control to the PHISH library and
the next datum is received.  Typically this occurs when a callback
function in the minnow returns.  This means that if you want the data
to persist within the minnow, you must make a copy.  It is OK to
unpack several fields from the same datum before making copies of the
fields.  It is also OK to pack one or more fields for sending and wait
to send it until after another datum is received.  This is because
calls to "phish_pack" functions copy data into a send buffer.

:line

The phish_unpack() function returns the next field in the latest
received datum.  The function itself returns an integer flag set to
one of these values (defined in src/phish.h):

PHISH_RAW = 0
PHISH_BYTE = 1
PHISH_INT = 2
PHISH_UINT64 = 3
PHISH_DOUBLE = 4
PHISH_STRING = 5
PHISH_INT_ARRAY = 6
PHISH_UINT64_ARRAY = 7
PHISH_DOUBLE_ARRAY = 8 :ul

PHISH_RAW is a string of raw bytes which can store whatever the
sending minnow put into its send buffer, e.g. a C data structure
containing a collection of various C primitive data types.  PHISH_INT
is a signed int, typically 32-bits in length.  PHISH_UINT64 is an
unsigned 64-bit int.  PHISH_STRING is a standard C-style
NULL-terminated string.  The ARRAY types mean the field is a sequence
of "int" or "uint64" or "double" values, packed one after the other.

The function also returns {buf} and {len}.  {Buf} is a char pointer to
where the field starts.  You will need to cast this to the appropriate
data type if necessary to access the data.  {Len} is the length of
the field, with the following meanings:

PHISH_RAW: len = # of bytes
PHISH_BYTE: len = 1
PHISH_INT: len = 1
PHISH_UINT64: len = 1
PHISH_DOUBLE: len = 1
PHISH_STRING: len = # of bytes, including the trailing NULL
PHISH_INT_ARRAY: len = # of int values
PHISH_UINT64_ARRAY: len = # of uint64 values
PHISH_DOUBLE_ARRAY: len = # of double values :ul

:line

The phish_datum() function returns information about the entire datum.
The function itself returns the input port it was received on.  See
the "phish_port"_phish_port.html functions for a discussion of ports.

The function also returns {buf} and {len}.  In this case, unlike
the phish_unpack() function, {buf} is a char pointer to
where the entire datum starts, which includes other info
besides the data itself, e.g. the number of fields and the data type
flags.  Likewise, {len} is the length in bytes of the entire datum,
including its data and flags.

A minnow can parse the entire datum following this function call, to
extract whatever info it needs; see "this section"_Library.html#datum
of the "PHISH Library"_Library.html doc page for a description of the
structure of a datum.  But the more common usage is to follow a
phish_datum() call with a call to the
"phish_pack_datum"_phish_pack.html function to pack the entire datum
as-is for sending to another minnow.

The phish_datum() function does not conflict with the phish_unpack()
function.  Phish_datum() can be called before or after or inbetween a
series of phish_unpack() calls.

:line

[Restrictions:] none

[Related commands:]

"phish_recv"_phish_recv.html, "phish_pack"_phish_pack.html
