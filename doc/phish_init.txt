"PHISH WWW Site"_pws - "PHISH Documentation"_pd - "Bait.py Commands"_pc :c

:link(pws,http://phish.sandia.gov)
:link(pd,Manual.html)
:link(pc,Bait.html)

:line

phish_init() function :h3
phish_school() function :h3

[C syntax:]

void phish_init(int *narg, char ***args) :pre
void phish_school(int *idlocal, int *nlocal, int *idglobal, int *nglobal) :pre

[C examples:]

phish_init(&argc,&argv);
int idlocal,nlocal,idglobal,nglobal;
MPI_Comm comm = phish_school(&idlocal,&nlocal,&idglobal,&nglobal);
printf("Local minnow info: %d %d\n",idlocal,nlocal);
printf("Global minnow info: %d %d\n",idglobal,nglobal); :pre

[Python syntax:]

def init(args) :pre
def school() :pre

[Python examples:]

import phish
args = phish.init(sys.argv)
first_minnow_arg = args[0]
idlocal,nlocal,idglobal,nglobal = phish.school() :pre

[Description:]

These are PHISH library functions which can be called from a minnow
application.  In PHISH lingo, a "minnow" is a stand-alone application
which makes calls to the "PHISH library"_Library.html.

A PHISH program typically includes one or more sets of minnows, as
specified in a PHISH input script.  Each minnow in each set is an
individual process.  In a local sense, each minnow has a local-ID from
0 to Nlocal-1 within its set, where {Nlocal} is the number of minnows
in the set.  Globally, each minnow has a global-ID from 0 to
Nglobal-1, where {Nglobal} is the total number of minnows.  The
global-IDs are ordered by set, so that minnows within each set have
consecutive IDs.  These IDs enable the PHISH library to orchestrate
communication of datums between minnows in different sets.  E.g. when
running the MPI version of the PHISH library, the global-ID
corresponsds to the rank ID of an MPI process, used in MPI_Send() and
MPI_Recv() function calls.

:line

The phish_init() function must be the first call to the PHISH library
made by a minnow.  Since it alters the command-line arguments passed
to the minnow, it is typically the first executable line of a minnow
program.

It's purpose is to initialize the library using special command-line
arguments passed to the minnow when it was launched, typically by the
MPI or socket launch script that the "bait.py"_Bait.html tool creates
from a PHISH input script.

The two arguments to phish_init() are pointers to the number of
command-line arguments, and a pointer to the arguments themselves as
an array of strings.  These are passed as pointers, because the PHISH
library reads and removes the PHISH-specific arguments.  It then
returns the reamining minnow-specific arguments, which the minnow can
read and process.

Note that in the Python version of phish.init(), the full argument
list is passed as an argument, and the truncated argument list is
returned.

There are the switches and arguments the PHISH library looks for and
processes:

-minnow exefile ID Nlocal Nprev
-in sprocs sfirst sport style rprocs rfirst rport
-out sprocs sfirst sport style rprocs rfirst rport
-args arg1 arg2 ... = args for the minnoq itself :ul

The {-minnow} switch appears once, as the first argument.  {Exefile}
is the name of executable file for this minnow, e.g. count or
count.py.  The ID is the minnow ID in the PHISH input script.  The
{Nlocal} argument was explained above.  {Nprev} is the total number of
minnows in sets of minnows previous to this one.  It is used to infer
the {local-ID} value discussed above.

The {-in} switch appears once for every connection the minnow has with
other minnows, where it is a receiver of datums.  See the
"connect"_bait_connect.html command in PHISH input scripts processed
by the "bait.py"_Bait.html tool, for more information.

{Sprocs}, {sfirst}, and {sport} refer to the set of minnows sending to
this minnow.  They are respectively, the number of minnows in the set,
the global ID of the first minnow in the set, and the output port used
by those minnows.  {Rprocs}, {rfirst}, and {rport} refer to the set of
minnows receivng the datums, i.e. the set of minnows this minnow
belongs to.  They are respectively, the number of minnows in the set,
the global ID of the first minnow in the set, and the input port used
by those minnows.  {Style} is the connection style, as specified by
the "connect"_bait_connect.html command in the PHISH input script
processed by the "bait.py"_Bait.html tool.  E.g. {style} is a word
like "single" or "hashed".  If it is "subscribe", then extra info
about the external host and its TCP port is appended to the {style},
e.g. "subscribe/www.foo.com:25".

The {-out} switch appears once for every connection the minnow has
with other minnows, where it is a sender of datums.  See the
"connect"_bait_connect.html command in PHISH input scripts processed
by the "bait.py"_Bait.html tool, for more information.

{Sprocs}, {sfirst}, and {sport} refer to the set of minnows sending
datums, i.e. the set of minnows this minnow belongs to.  They are
respectively, the number of minnows in the set, the global ID of the
first minnow in the set, and the output port used by those minnows.
{Rprocs}, {rfirst}, and {rport} refer to the set of minnows receivng
the datums.  They are respectively, the number of minnows in the set,
the global ID of the first minnow in the set, and the input port used
by those minnows.  {Style} is the connection style, as specified by
the "connect"_bait_connect.html command in the PHISH input script
processed by the "bait.py"_Bait.html tool.  E.g. {style} is a word
like "single" or "hashed".  If it is "publish", then extra info about
the TCP port is appended to the {style}, e.g. "publish/25".

The {-args} switch appears last and lists all the remaining
minnow-specific arguments.  The PHISH library ignores these, but
strips of all command-line arguments up to and including the {-args}
switch before returning the args to the minnow caller.

The phish_init() function also flags each specified input port and
output port with a CLOSED status, instead of UNUSED.  See the
"connect"_bait_connect.html command for the "bait.py"_Bait.html tool
for more info about communication ports.  See the
"phish_input"_phish_input.html and "phish_output"_phish_output.html
functions for more info about port status.

:line

The phish_school() function can be used to query the local and global
information about the minnow, both within its local set of duplicate
minnows, and within the global school of minnows.

The meaning of the 4 returned values {idlocal}, {nlocal}, {idglobal},
and {nglobal} are as described above for the {-minnow} command-line
switch.

NOTE: also need phish_school or a variatnt to tell something
      about other sets connected to?
      for phish_send_direct() function

[Restrictions:] none

[Related commands:] none
