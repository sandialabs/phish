"PHISH WWW Site"_pws - "PHISH Documentation"_pd - "Bait.py Commands"_pc :c

:link(pws,http://www.sandia.gov/~sjplimp/phish.html)
:link(pd,Manual.html)
:link(pc,Bait.html)

:line

set command :h3

[Syntax:]

set keyword value

keyword = {memory} or {safe} or {port} :ulb,l
  {memory} value = N
    N = max size of datum in Kbytes
  {safe} value = M
    M = send a datum "safely" every this many sends
  {self} value = S
    S = allow queueing of this many messages to self :pre
:ule

[Examples:]

set memory 1024
set safe 10
set self 20 :pre

[Description:]

Set is a command that can be used in a PHISH input script which is
recognized by the "bait.py"_Bait.html setup program.  It resets
default values that are used by the bait.py program as it reads and
processes commands from the PHISH input script.

The {memory} keyword sets the maximum length of datums that are
exchanged by minnows when a PHISH program runs.  Send and receive
buffers for datums are allocated by the "PHISH
library"_Section_library.html.  Only 2 such buffers are allocated, so
this setting essentially determines the memory footprint of the PHISH
library.

The {N} setting is in Kbytes, so that {N} = 1024 is 1 Mbyte, and {N} =
1048576 is 1 Gbyte.  The default is {N} = 1, since typical PHISH
minnows send and receive small datums.

The {safe} keyword is only relevant for the MPI version of the PHISH
library.  It causes the library to use a "safe" MPI_Ssend() call every
Mth time it sends a datum, rather than the normal MPI_Send() function.
If M = 0, "safe" sends are never performed.

Safe in this context refers to messages being dropped if the receiving
process is backed up.  This can happen if a minnow in a PHISH school
of minnows is significantly slower to process datums than all the
others, and a large number of datums are being continually sent to it.
When a safe send is done, an extra handshake is performed between the
sender and receiver to insure the receiver is ready for the datum.
Doing this often enough should effectively throttle the incoming
messages to a slow minnow, so an overflow does not occur.  Note that
the extra handshaking between the MPI processes slows down the rate at
which small messages are exchanged, so you should not normally use
this setting unless MPI errors arise, e.g. due to "too many unexpected
messages".  A good setting for M depends on how many minnows are
sending to the overflowing minnow.  Typical MPI implementations allow
tens of thousands of small incoming messages to be queued, so M = 1000
or 10000 is fine if a single minnow is sending to the minnow.  If 10
minnows are sending to the overflowing minnow, then M should be
reduced by a factor of 10.

The {self} keyword is only relevant for the MPI version of the PHISH.
A PHISH net described by an input script can include
"hook"_bait_hook.html commands that route datums from a school back to
itself, e.g. in some kind of looping fashion.  This means that a
procesor can send messages to itself.  When this occurs the PHISH
library uses a buffered MPI_Bsend() call.  This avoids a possible hang
due to a blocking send, which can happen in some MPI implementations.
The value of {S} determines how big a buffer is reserved for the
buffered send operations.  It effectively means how many messsages (of
maximum size, as determined by the memory keyword above), can be sent
to self and buffered before they are received.  In most cases the
small default setting is sufficient, but if a minnow can send many
messages to itself before reading and processing them, you may need to
boost this setting.

[Restrictions:] none

[Related commands:]

See the discussion of command-line arguments for the
"bait.py"_Secttion_bait.html tool.

[Default:]

The default settings are memory = 1 (1 Kbyte), safe = 0, self = 10.
